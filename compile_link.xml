<para>
    对于一个程序员来说，有必要深入了解下，编译器和链接器隐藏的东西。我试图去理解它。
</para>
<sect1>
    <title>GCC编译和链接</title>
    <screen>
1. 预处理(Prepressing): 
gcc -E hello.c -o hello.i或cpp hello.c > hello.i
展开#define宏定义
处理条件预编译#ifdef
处理#include预编译指令，并将被包含文件插入到该预编译指令位置,递归进行。
删除注释
添加行号和文件名标识
保留所有#pragma编译器指令
2. 编译(Compilation):
gcc -S hello.i -o hello.s 或
预处理和编译合并一个步骤gcc -S hello.c -o hello.s
对于C来说是/usr/lib/gcc/i686-linux-gnu/4.1/cc1 hello.c或对于C++来说是cc1plus
把预处理完的文件进行一系列词法分析，语法分析，语义分析以及优化后生成相应的汇编代码文件。
3. 汇编(Assembly):
as hello.s -o hello.o或gcc -c hello.s -o hello.o
gcc -c hello.c -o hello.o
将汇编代码转变成机器指令
4. 链接(Linking):
ld -static /usr/lib/crt1.o /usr/lib/crti.o /usr/lib/gcc/i686-linux-gnu/4.1.3/crtbeginT.o -L/usr/lib/gcc/i686-linux-gnu/4.1.3 -L/usr/lib -L/lib hello.o --start-group -lgcc -lgcc_eh -lc --end-group /usr/lib/gcc/i686-linux-gnu/4.1.3/crtend.o /usr/lib/crtn.o
    </screen>
</sect1>
<sect1>
    <title>编译器</title>
    <screen>
编译过程分为６步骤：扫描，语法分析，语义分析，源代码优化，代码生成和目标代码优化
source code ->scanner-> tokens ->parser-> syntax tree ->semantic analyzer-> commented syntax tree ->source code optimizer-> intermediate representation ->code generator-> target code ->code optimizer-> final target code
首先源代码被输入到扫描器，进行简单词法分析，使用有限状态机算法将源代码的字符序列分割成一系列记号．
lex程序可以实现词法扫描
语法分析器将对记号进行语法分析，产生语法树，整个过程采用上下文无关语法的分析手段．
语法分析器可以使用yacc。
语义分析分为静态语义，在编译期间可以确定的，动态语义只有在运行期才确定的
静态语义包含声明和类型的匹配，类型的转换。
源码级优化器在不同编译器中可能后又不同的定义，源码优化器将整个语法树转换成中间代码，他是语法树的顺序表示。三地址码，P-代码
目标代码生成器和目标代码优化器
    </screen>
</sect1>

<sect1>
    <title>链接器</title>
    <screen>
重定位：重新计算各个目标的地址过程
符号：表示一个地址，可能是一段子程序的起始地址，也可能是一个变量的起始地址
把每个源代码模块单独编译，然后将他们组装起来，组装模块的过程叫做链接
链接过程包含：地址和空间分配，符号决议(符号绑定，名称绑定,地址绑定,指令绑定），重定位
地址修正过程叫做重定位，每个要被修改的地方叫重定位入口
    </screen>
</sect1>
